{
  "lessonId": 57,
  "title": "Incrementing and Decrementing in Loops",
  "questions": [
    {
      "id": 1,
      "type": "text",
      "question": "What does the increment operator ++ do?",
      "options": [
        { "type": "text", "value": "Adds 1 to a variable" },
        { "type": "text", "value": "Multiplies by 2" },
        { "type": "text", "value": "Subtracts 1" },
        { "type": "text", "value": "Divides by 2" }
      ],
      "answer": 0,
      "explanation": "The increment operator ++ adds 1 to a variable, providing a concise way to increase values in loops."
    },
    {
      "id": 2,
      "type": "text",
      "question": "What does the decrement operator -- do?",
      "options": [
        { "type": "text", "value": "Adds 1" },
        { "type": "text", "value": "Subtracts 1 from a variable" },
        { "type": "text", "value": "Doubles the value" },
        { "type": "text", "value": "Resets to zero" }
      ],
      "answer": 1,
      "explanation": "The decrement operator -- subtracts 1 from a variable, useful for countdown loops and processing elements in reverse."
    },
    {
      "id": 3,
      "type": "text",
      "question": "What is the difference between prefix (++x) and postfix (x++) when used alone in a loop update?",
      "options": [
        { "type": "text", "value": "Prefix is faster" },
        { "type": "text", "value": "Postfix uses more memory" },
        { "type": "text", "value": "No difference - they produce identical results" },
        { "type": "text", "value": "Prefix doesn't work in loops" }
      ],
      "answer": 2,
      "explanation": "When used as standalone statements in loop updates, prefix and postfix produce identical results. The difference only matters when the value is used in an expression."
    },
    {
      "id": 4,
      "type": "code",
      "question": "What does i += 5 mean?",
      "options": [
        { "type": "text", "value": "i equals 5" },
        { "type": "text", "value": "i divided by 5" },
        { "type": "text", "value": "i compared to 5" },
        { "type": "text", "value": "i = i + 5" }
      ],
      "answer": 3,
      "explanation": "The compound assignment operator += is shorthand. i += 5 means i = i + 5, adding 5 to the current value of i."
    },
    {
      "id": 5,
      "type": "code",
      "question": "What values does this loop print?\n\nfor (int i = 0; i <= 20; i += 5) {\n    System.out.println(i);\n}",
      "options": [
        { "type": "text", "value": "0, 5, 10, 15, 20" },
        { "type": "text", "value": "5, 10, 15, 20" },
        { "type": "text", "value": "0, 5, 10, 15" },
        { "type": "text", "value": "1, 2, 3, 4, 5" }
      ],
      "answer": 0,
      "explanation": "The loop starts at 0 and increments by 5 each iteration, printing multiples of 5: 0, 5, 10, 15, and 20."
    },
    {
      "id": 6,
      "type": "code",
      "question": "What does temp -= 10 mean?",
      "options": [
        { "type": "text", "value": "temp = 10" },
        { "type": "text", "value": "temp = temp - 10" },
        { "type": "text", "value": "temp = temp + 10" },
        { "type": "text", "value": "temp < 10" }
      ],
      "answer": 1,
      "explanation": "The compound assignment temp -= 10 is shorthand for temp = temp - 10, subtracting 10 from temp."
    },
    {
      "id": 7,
      "type": "code",
      "question": "What values does this loop print?\n\nfor (int value = 1; value <= 100; value *= 2) {\n    System.out.println(value);\n}",
      "options": [
        { "type": "text", "value": "1, 3, 5, 7..." },
        { "type": "text", "value": "2, 4, 6, 8..." },
        { "type": "text", "value": "1, 2, 4, 8, 16, 32, 64" },
        { "type": "text", "value": "1, 2, 3, 4..." }
      ],
      "answer": 2,
      "explanation": "Using value *= 2 doubles the value each iteration, printing powers of 2: 1, 2, 4, 8, 16, 32, and 64."
    },
    {
      "id": 8,
      "type": "code",
      "question": "What type of numbers does this loop generate?\n\nfor (int i = 0; i <= 10; i += 2) {\n    System.out.println(i);\n}",
      "options": [
        { "type": "text", "value": "Odd numbers" },
        { "type": "text", "value": "Prime numbers" },
        { "type": "text", "value": "Negative numbers" },
        { "type": "text", "value": "Even numbers" }
      ],
      "answer": 3,
      "explanation": "Starting at 0 and incrementing by 2 generates even numbers: 0, 2, 4, 6, 8, and 10."
    },
    {
      "id": 9,
      "type": "text",
      "question": "What happens if you forget to update the loop variable?",
      "options": [
        { "type": "text", "value": "The loop creates an infinite loop" },
        { "type": "text", "value": "The loop runs once" },
        { "type": "text", "value": "Compilation error" },
        { "type": "text", "value": "The loop runs backward" }
      ],
      "answer": 0,
      "explanation": "Forgetting to update the loop variable creates an infinite loop because the condition never becomes false."
    },
    {
      "id": 10,
      "type": "code",
      "question": "What type of numbers does this loop generate?\n\nfor (int i = 1; i <= 10; i += 2) {\n    System.out.println(i);\n}",
      "options": [
        { "type": "text", "value": "Even numbers" },
        { "type": "text", "value": "Odd numbers" },
        { "type": "text", "value": "All numbers" },
        { "type": "text", "value": "Prime numbers" }
      ],
      "answer": 1,
      "explanation": "Starting at 1 and incrementing by 2 generates odd numbers: 1, 3, 5, 7, and 9."
    },
    {
      "id": 11,
      "type": "text",
      "question": "What happens when you update in the wrong direction?",
      "options": [
        { "type": "text", "value": "The loop runs normally" },
        { "type": "text", "value": "Compilation error" },
        { "type": "text", "value": "The loop creates an infinite loop" },
        { "type": "text", "value": "The program crashes immediately" }
      ],
      "answer": 2,
      "explanation": "Updating in the wrong direction (e.g., decrementing when you should increment) creates an infinite loop because the condition never becomes false."
    },
    {
      "id": 12,
      "type": "code",
      "question": "What is count++ equivalent to?",
      "options": [
        { "type": "text", "value": "count = count * 2" },
        { "type": "text", "value": "count = 1" },
        { "type": "text", "value": "count = count + 1" },
        { "type": "text", "value": "count = count - 1" }
      ],
      "answer": 2,
      "explanation": "count++ is equivalent to count = count + 1, incrementing the variable by 1."
    },
    {
      "id": 13,
      "type": "text",
      "question": "Can you use multiplication and division to update loop variables?",
      "options": [
        { "type": "text", "value": "Yes, to create geometric progressions" },
        { "type": "text", "value": "No, only addition and subtraction work" },
        { "type": "text", "value": "Only in while loops" },
        { "type": "text", "value": "Only in for loops" }
      ],
      "answer": 0,
      "explanation": "Yes, multiplication and division can update loop variables to create geometric progressions like powers of 2."
    },
    {
      "id": 14,
      "type": "code",
      "question": "What values does this loop print?\n\nfor (int temp = 100; temp >= 60; temp -= 10) {\n    System.out.println(temp);\n}",
      "options": [
        { "type": "text", "value": "100, 90, 80, 70, 60" },
        { "type": "text", "value": "60, 70, 80, 90, 100" },
        { "type": "text", "value": "100, 90, 80, 70" },
        { "type": "text", "value": "110, 100, 90, 80, 70, 60" }
      ],
      "answer": 0,
      "explanation": "The loop starts at 100 and decrements by 10 each iteration using temp -= 10, printing: 100, 90, 80, 70, and 60."
    },
    {
      "id": 15,
      "type": "text",
      "question": "When combining multiple updates in a for loop, what separates them?",
      "options": [
        { "type": "text", "value": "Semicolons" },
        { "type": "text", "value": "Periods" },
        { "type": "text", "value": "Commas" },
        { "type": "text", "value": "Colons" }
      ],
      "answer": 2,
      "explanation": "When combining multiple updates in a for loop, commas separate them in the update section."
    },
    {
      "id": 16,
      "type": "text",
      "question": "What should your update always do?",
      "options": [
        { "type": "text", "value": "Stay the same" },
        { "type": "text", "value": "Print values" },
        { "type": "text", "value": "Create new variables" },
        { "type": "text", "value": "Move the variable toward the termination condition" }
      ],
      "answer": 3,
      "explanation": "Your update should always move the variable toward the termination condition to ensure the loop eventually terminates naturally."
    }
  ]
}