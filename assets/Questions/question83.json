{
  "lessonId": 83,
  "title": "Garbage Collection and Object Lifecycles",
  "questions": [
    {
      "id": 1,
      "type": "text",
      "question": "How does Java handle memory management?",
      "options": [
        { "type": "text", "value": "Through automatic garbage collection" },
        { "type": "text", "value": "Programmers must manually free memory" },
        { "type": "text", "value": "Memory is never freed" },
        { "type": "text", "value": "Using the delete keyword" }
      ],
      "answer": 0,
      "explanation": "Java automatically manages memory through garbage collection, freeing programmers from manual memory management."
    },
    {
      "id": 2,
      "type": "text",
      "question": "What are the three stages of an object's lifecycle?",
      "options": [
        { "type": "text", "value": "Start, middle, end" },
        { "type": "text", "value": "Creation, use, and garbage collection" },
        { "type": "text", "value": "Initialization, execution, deletion" },
        { "type": "text", "value": "Allocation, processing, termination" }
      ],
      "answer": 1,
      "explanation": "An object's lifecycle consists of creation (with new), use (calling methods), and garbage collection (automatic cleanup)."
    },
    {
      "id": 3,
      "type": "text",
      "question": "When does an object become eligible for garbage collection?",
      "options": [
        { "type": "text", "value": "Immediately after creation" },
        { "type": "text", "value": "After calling a method on it" },
        { "type": "text", "value": "When it is no longer reachable by any reference" },
        { "type": "text", "value": "When the program ends" }
      ],
      "answer": 2,
      "explanation": "An object becomes eligible for garbage collection when no reference variables point to it, making it unreachable."
    },
    {
      "id": 4,
      "type": "text",
      "question": "What happens when you set a reference to null?",
      "options": [
        { "type": "text", "value": "The object is immediately deleted" },
        { "type": "text", "value": "The object remains unchanged" },
        { "type": "text", "value": "The program crashes" },
        { "type": "text", "value": "The object becomes unreachable and eligible for GC if no other references exist" }
      ],
      "answer": 3,
      "explanation": "Setting a reference to null removes that reference; if no other references exist, the object becomes eligible for garbage collection."
    },
    {
      "id": 5,
      "type": "text",
      "question": "What happens when a reference variable goes out of scope?",
      "options": [
        { "type": "text", "value": "The object it referenced may become eligible for GC if no other references exist" },
        { "type": "text", "value": "The object is immediately deleted" },
        { "type": "text", "value": "Nothing happens" },
        { "type": "text", "value": "The program terminates" }
      ],
      "answer": 0,
      "explanation": "When a reference goes out of scope, the object may become unreachable and eligible for garbage collection."
    },
    {
      "id": 6,
      "type": "text",
      "question": "If multiple references point to the same object, when does it become eligible for GC?",
      "options": [
        { "type": "text", "value": "When the first reference is removed" },
        { "type": "text", "value": "When all references to it are removed" },
        { "type": "text", "value": "Never" },
        { "type": "text", "value": "Immediately" }
      ],
      "answer": 1,
      "explanation": "An object remains reachable until all references pointing to it are removed."
    },
    {
      "id": 7,
      "type": "text",
      "question": "What does System.gc() do?",
      "options": [
        { "type": "text", "value": "Immediately deletes all objects" },
        { "type": "text", "value": "Does nothing" },
        { "type": "text", "value": "Suggests garbage collection to the JVM (not guaranteed)" },
        { "type": "text", "value": "Crashes the program" }
      ],
      "answer": 2,
      "explanation": "System.gc() suggests garbage collection to the JVM but doesn't guarantee immediate execution."
    },
    {
      "id": 8,
      "type": "text",
      "question": "Can circular references prevent garbage collection in Java?",
      "options": [
        { "type": "text", "value": "Yes, always" },
        { "type": "text", "value": "Only for primitive types" },
        { "type": "text", "value": "Only in arrays" },
        { "type": "text", "value": "No, modern garbage collectors handle circular references correctly" }
      ],
      "answer": 3,
      "explanation": "Modern Java garbage collectors handle circular references; if an entire group is unreachable, it's collected."
    },
    {
      "id": 9,
      "type": "text",
      "question": "What keeps an object alive when stored in an instance variable?",
      "options": [
        { "type": "text", "value": "The reference from the containing object keeps it reachable" },
        { "type": "text", "value": "Instance variables don't keep objects alive" },
        { "type": "text", "value": "The garbage collector" },
        { "type": "text", "value": "The new keyword" }
      ],
      "answer": 0,
      "explanation": "An object referenced by an instance variable remains reachable as long as the containing object is reachable."
    },
    {
      "id": 10,
      "type": "text",
      "question": "Do you need to explicitly delete objects in Java?",
      "options": [
        { "type": "text", "value": "Yes, using the delete keyword" },
        { "type": "text", "value": "No, garbage collection handles cleanup automatically" },
        { "type": "text", "value": "Only for large objects" },
        { "type": "text", "value": "Only in loops" }
      ],
      "answer": 1,
      "explanation": "Java's automatic garbage collection eliminates the need for explicit object deletion."
    },
    {
      "id": 11,
      "type": "text",
      "question": "What happens to objects in an array when the array reference is set to null?",
      "options": [
        { "type": "text", "value": "Objects remain in memory forever" },
        { "type": "text", "value": "Only the array is collected" },
        { "type": "text", "value": "The array and all its objects become eligible for GC" },
        { "type": "text", "value": "The program crashes" }
      ],
      "answer": 2,
      "explanation": "When an array reference is nullified, both the array and objects it contained become eligible for garbage collection."
    },
    {
      "id": 12,
      "type": "text",
      "question": "Should you call System.gc() in normal application code?",
      "options": [
        { "type": "text", "value": "Yes, always" },
        { "type": "text", "value": "Yes, after every object creation" },
        { "type": "text", "value": "No, it's not recommendedâ€”trust the garbage collector" },
        { "type": "text", "value": "Only in constructors" }
      ],
      "answer": 2,
      "explanation": "Don't call System.gc() in normal code; the garbage collector is optimized to run when appropriate."
    },
    {
      "id": 13,
      "type": "text",
      "question": "What benefit does automatic garbage collection provide?",
      "options": [
        { "type": "text", "value": "Makes programs run faster" },
        { "type": "text", "value": "Uses less memory" },
        { "type": "text", "value": "Eliminates manual memory management bugs" },
        { "type": "text", "value": "Prevents memory leaks entirely" }
      ],
      "answer": 2,
      "explanation": "Automatic garbage collection eliminates manual memory management bugs like dangling pointers and double-free errors."
    },
    {
      "id": 14,
      "type": "text",
      "question": "What happens when you reassign a reference to a new object?",
      "options": [
        { "type": "text", "value": "Both objects remain in memory" },
        { "type": "text", "value": "The original object becomes eligible for GC if no other references exist" },
        { "type": "text", "value": "The new object is rejected" },
        { "type": "text", "value": "Both objects are deleted" }
      ],
      "answer": 1,
      "explanation": "Reassigning a reference makes the original object unreachable if no other references exist, making it eligible for GC."
    },
    {
      "id": 15,
      "type": "text",
      "question": "How does garbage collection prevent memory leaks?",
      "options": [
        { "type": "text", "value": "By never freeing memory" },
        { "type": "text", "value": "By automatically freeing memory from unreachable objects" },
        { "type": "text", "value": "By limiting object creation" },
        { "type": "text", "value": "By requiring manual deletion" }
      ],
      "answer": 1,
      "explanation": "Garbage collection prevents memory leaks by automatically reclaiming memory from unreachable objects."
    },
    {
      "id": 16,
      "type": "text",
      "question": "Why is understanding object lifecycles important?",
      "options": [
        { "type": "text", "value": "To manually delete objects" },
        { "type": "text", "value": "To write memory-efficient programs and avoid keeping objects alive unnecessarily" },
        { "type": "text", "value": "To prevent garbage collection" },
        { "type": "text", "value": "It's not important" }
      ],
      "answer": 1,
      "explanation": "Understanding lifecycles helps you avoid unintentionally keeping objects alive longer than needed, improving memory efficiency."
    }
  ]
}