{
  "lessonId": 60,
  "title": "Infinite Loops and How to Avoid Them",
  "questions": [
    {
      "id": 1,
      "type": "text",
      "question": "What is an infinite loop?",
      "options": [
        { "type": "text", "value": "A loop that never terminates because its condition never becomes false" },
        { "type": "text", "value": "A loop that runs very fast" },
        { "type": "text", "value": "A loop with many iterations" },
        { "type": "text", "value": "A loop that prints infinite numbers" }
      ],
      "answer": 0,
      "explanation": "An infinite loop is a loop that never terminates because its condition never becomes false, causing the program to run endlessly."
    },
    {
      "id": 2,
      "type": "text",
      "question": "What is the most common cause of infinite loops?",
      "options": [
        { "type": "text", "value": "Too many print statements" },
        { "type": "text", "value": "Forgetting to update the loop variable" },
        { "type": "text", "value": "Using the wrong data type" },
        { "type": "text", "value": "Having too many loops" }
      ],
      "answer": 1,
      "explanation": "The most common cause is forgetting to update the loop variable that the condition depends on, causing the condition to remain true forever."
    },
    {
      "id": 3,
      "type": "code",
      "question": "Why is this an infinite loop?\n\nfor (int i = 0; i < 10; i--) {\n    System.out.println(i);\n}",
      "options": [
        { "type": "text", "value": "It's not infinite" },
        { "type": "text", "value": "It has a syntax error" },
        { "type": "text", "value": "The update moves i in the wrong direction, away from 10" },
        { "type": "text", "value": "The condition is wrong" }
      ],
      "answer": 2,
      "explanation": "The loop decrements i, moving it away from 10 into negative numbers. Since i stays less than 10, the condition remains true forever."
    },
    {
      "id": 4,
      "type": "code",
      "question": "Why is this an infinite loop?\n\nint count = 5;\nwhile (count != 0) {\n    count -= 2;\n}",
      "options": [
        { "type": "text", "value": "count never equals exactly 0" },
        { "type": "text", "value": "The syntax is wrong" },
        { "type": "text", "value": "The loop has no body" },
        { "type": "text", "value": "It's not infinite" }
      ],
      "answer": 0,
      "explanation": "Decrementing by 2 from 5 gives 5, 3, 1, -1, -3... The value never equals exactly 0, so count != 0 remains true forever."
    },
    {
      "id": 5,
      "type": "text",
      "question": "What should you never write without a clear exit strategy?",
      "options": [
        { "type": "text", "value": "while (true)" },
        { "type": "text", "value": "for loops" },
        { "type": "text", "value": "if statements" },
        { "type": "text", "value": "print statements" }
      ],
      "answer": 0,
      "explanation": "Never write while (true) without a clear exit strategy like a break statement, as it creates an intentional infinite loop."
    },
    {
      "id": 6,
      "type": "code",
      "question": "Why is this an infinite loop?\n\nint i = 0;\nint j = 0;\nwhile (i < 5) {\n    j++;\n}",
      "options": [
        { "type": "text", "value": "Too many variables" },
        { "type": "text", "value": "The wrong variable is updated - j increments instead of i" },
        { "type": "text", "value": "The condition is wrong" },
        { "type": "text", "value": "It's not infinite" }
      ],
      "answer": 1,
      "explanation": "The loop checks i but updates j instead. Since i never changes from 0, the condition i < 5 stays true forever."
    },
    {
      "id": 7,
      "type": "text",
      "question": "Why should you avoid using != with floating-point numbers in loop conditions?",
      "options": [
        { "type": "text", "value": "It's faster to use other operators" },
        { "type": "text", "value": "Floating-point precision issues may cause the value to never equal exactly" },
        { "type": "text", "value": "It causes syntax errors" },
        { "type": "text", "value": "It's not supported in Java" }
      ],
      "answer": 1,
      "explanation": "Floating-point precision issues can cause values to never equal exactly what you expect, creating infinite loops with != comparisons."
    },
    {
      "id": 8,
      "type": "code",
      "question": "Why is this an infinite loop?\n\nint x = 0;\nint y = 10;\nwhile (x < 5 || y > 0) {\n    x++;\n}",
      "options": [
        { "type": "text", "value": "x doesn't change" },
        { "type": "text", "value": "The condition uses AND instead of OR" },
        { "type": "text", "value": "Even after x reaches 5, y > 0 remains true because y never changes" },
        { "type": "text", "value": "It's not infinite" }
      ],
      "answer": 2,
      "explanation": "With OR (||), the loop continues as long as either condition is true. Since y never changes from 10, y > 0 remains true forever."
    },
    {
      "id": 9,
      "type": "text",
      "question": "What three questions should you ask to prevent infinite loops?",
      "options": [
        { "type": "text", "value": "Does the loop variable change, in the right direction, and will the condition become false?" },
        { "type": "text", "value": "Is it fast, simple, and short?" },
        { "type": "text", "value": "Does it print, calculate, and store?" },
        { "type": "text", "value": "Is it nested, complex, and efficient?" }
      ],
      "answer": 0,
      "explanation": "Always ask: Does the loop variable change? Does it change in the right direction? Will the condition eventually become false?"
    },
    {
      "id": 10,
      "type": "code",
      "question": "Why is this an infinite loop?\n\nint i = 0;\nwhile (i < 5) {\n    if (i % 2 == 0) {\n        continue;\n    }\n    i++;\n}",
      "options": [
        { "type": "text", "value": "When i is 0 (even), continue skips the increment" },
        { "type": "text", "value": "The condition is wrong" },
        { "type": "text", "value": "Too many if statements" },
        { "type": "text", "value": "It's not infinite" }
      ],
      "answer": 0,
      "explanation": "When i is 0 (even), continue executes, jumping back to the condition without incrementing i. The variable stays at 0 forever."
    },
    {
      "id": 11,
      "type": "text",
      "question": "What debugging technique helps identify infinite loops?",
      "options": [
        { "type": "text", "value": "Deleting all code" },
        { "type": "text", "value": "Adding temporary print statements showing variable values" },
        { "type": "text", "value": "Using more variables" },
        { "type": "text", "value": "Making loops longer" }
      ],
      "answer": 1,
      "explanation": "Adding temporary print statements showing variable values each iteration makes it obvious if variables aren't changing or are moving incorrectly."
    },
    {
      "id": 12,
      "type": "text",
      "question": "What should you do when testing potentially problematic loops?",
      "options": [
        { "type": "text", "value": "Use huge iteration counts immediately" },
        { "type": "text", "value": "Never test them" },
        { "type": "text", "value": "Test with small iteration counts first" },
        { "type": "text", "value": "Run them on different computers" }
      ],
      "answer": 2,
      "explanation": "Test with small iteration counts first to verify the loop terminates correctly before using larger values."
    },
    {
      "id": 13,
      "type": "text",
      "question": "When are intentional infinite loops acceptable?",
      "options": [
        { "type": "text", "value": "Never" },
        { "type": "text", "value": "Always" },
        { "type": "text", "value": "When they have clear, reliable ways to terminate like break statements" },
        { "type": "text", "value": "Only in nested loops" }
      ],
      "answer": 2,
      "explanation": "Intentional infinite loops are acceptable when they have clear, reliable ways to terminate, such as break statements based on specific conditions."
    },
    {
      "id": 14,
      "type": "text",
      "question": "What should you use instead of value != 1.0 for floating-point loops?",
      "options": [
        { "type": "text", "value": "value >= 1.0 or Math.abs(value - 1.0) < 0.0001" },
        { "type": "text", "value": "value == 1.0" },
        { "type": "text", "value": "value < 1.0" },
        { "type": "text", "value": "Always use !=" }
      ],
      "answer": 0,
      "explanation": "Use range checks like value >= 1.0 or epsilon comparisons instead of exact equality for floating-point values to avoid precision issues."
    },
    {
      "id": 15,
      "type": "text",
      "question": "What happens if your program freezes during testing?",
      "options": [
        { "type": "text", "value": "Nothing can be done" },
        { "type": "text", "value": "Wait forever" },
        { "type": "text", "value": "It's likely stuck in an infinite loop - use your IDE's stop command" },
        { "type": "text", "value": "Restart your computer" }
      ],
      "answer": 2,
      "explanation": "If your program freezes, it's likely stuck in an infinite loop. Use your IDE's stop command to forcefully terminate the program."
    },
    {
      "id": 16,
      "type": "code",
      "question": "Is this loop safe from being infinite?\n\nint count = 10;\nwhile (count > 0) {\n    System.out.println(count);\n    count--;\n}",
      "options": [
        { "type": "text", "value": "Yes, it changes in the correct direction and will reach 0" },
        { "type": "text", "value": "No, it's infinite" },
        { "type": "text", "value": "Only if count is positive" },
        { "type": "text", "value": "It depends on the computer" }
      ],
      "answer": 0,
      "explanation": "Yes, this loop is safe. The variable count changes each iteration, moves in the correct direction (toward 0), and the condition will become false when count reaches 0."
    }
  ]
}